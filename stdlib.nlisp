(do
 (define defmacro
   (macro
     (macro-name arglist body)
     (quasiquote
      (define 
        (unquote macro-name)
        (macro (unquote arglist) (unquote body))))))
 
  ; syntax: (define f (arg1 arg2) (code))
  (define defun
   (macro
     (function-name arglist body)
     (quasiquote
      (define 
        (unquote function-name) 
        (lambda (unquote arglist) (unquote body))))))

  ; syntax: (if (test_code) (then_code) (else_code))
  (define if
   (macro
     (test then else)
     (quasiquote
       (cond ((unquote test) (unquote then))
             (#t (unquote else))))))
  
 (define and
   (macro
    (a b)
    (quasiquote
     (if (unquote a) (unquote b) nil))))
  
 (define or
   (macro
    (a b)
    (quasiquote
     (if (unquote a) (unquote a) (unquote b)))))

 (defun not (x)
     (if x nil (quote #t)))

 (defun > (x y)
     (< y x))

 (defun <= (x y)
     (not (> x y)))

 (defun >= (x y)
     (not (< x y)))

 (defun runfile (filename)
     (eval (parse (readfile filename))))


 (defun first (x)
     (nth x 0))
 
 (defun rest (x)
     (nthrest x 0))

 (defun append (lst elt)
     (insert lst (len lst) elt))
  
 (defun range (x)
      (do 
        (define counter 0)
        (define result (list))
        (while (< counter x)
          (do
            (append result counter)
            (define counter (+ counter 1))))
        result))
 
 (define for
   (macro (sym container code)
     (quasiquote 
       (do 
         (define _result_list_ (list))
         (define _for_loop_counter_ 0)
         (define _for_loop_container_ (unquote container))
         (while (< _for_loop_counter_ (len _for_loop_container_))
           (do
             (define (unquote sym) (nth _for_loop_container_ _for_loop_counter_))
             (define _for_loop_counter_ (+ _for_loop_counter_ 1))
             (append _result_list_ (unquote code))))
          _result_list_))))
 

 (defun plantuml_ast (ast)
   (+ "\n@startjson\n" (json_ast ast) "\n@endjson\n"))


(defun set (lst idx elt)
  (do
    (insert lst idx elt)
    (delete lst (+ 1 idx))))


(define run
  (macro (filename)
    (quasiquote (eval (parse (readfile (unquote filename)))))))


; TODO: proper implementation
(defun mod (number divisor)
  (do
    (while (< number 0)
      (define number (+ number divisor)))
    (while (>= number divisor)
      (define number (- number divisor)))
    number
  )
)

(define +=
  (macro (var amount)
    (quasiquote
      (define (unquote var) (+ (unquote var) (unquote amount))))))

(define -=
  (macro (var amount)
    (quasiquote
      (define (unquote var) (- (unquote var) (unquote amount))))))

(defun in (lst elt)
  (do
    (define idx 0)
    (define result nil)
    (while (not (or (>= idx (len lst)) (not (== result nil))))
      (do
        (define result (== (nth lst idx) elt))
        (+= idx 1)
      ))
    result))

  (defun fact (x)
      (if (<= x 1)
        1
        (* x (fact (- x 1)))))

)
