(do
 (define defmacro
   (macro
     (macro-name arglist body)
     (quasiquote
      (define 
        (unquote macro-name)
        (macro (unquote arglist) (unquote body))))))
 
  ; syntax: (define f (arg1 arg2) (code))
  (define defun
   (macro
     (function-name arglist body)
     (quasiquote
      (define 
        (unquote function-name) 
        (lambda (unquote arglist) (unquote body))))))

  ; syntax: (if (test_code) (then_code) (else_code))
  (define if
   (macro
     (test then else)
     (quasiquote
       (cond ((unquote test) (unquote then))
             (#t (unquote else))))))
  
 (define and
   (macro
    (a b)
    (quasiquote
     (if (unquote a) (unquote b) nil))))
  
 (define or
   (macro
    (a b)
    (quasiquote
     (if (unquote a) (unquote a) (unquote b)))))

 (define not
   (lambda (x)
     (if x nil (quote #t))))

 (define >
   (lambda (x y)
     (< y x)))

 (define <=
   (lambda (x y)
     (not (> x y))))

 (define >=
   (lambda (x y)
     (not (< x y))))

 (define runfile
   (lambda (filename)
     (eval (parse (readfile filename)))))


 (define first
   (lambda (x)
     (nth x 0)))
 
 (define rest
   (lambda (x)
     (nthrest x 0)))

 (define append
   (lambda (lst elt)
     (insert lst elt (len lst))))
  
 (define range
    (lambda (x)
      (do 
        (define counter 0)
        (define result (list))
        (while (< counter x)
          (do
            (append result counter)
            (define counter (+ counter 1))))
        result)))
 
 (define for
   (macro (sym container code)
     (quasiquote 
       (do 
         (define _result_list_ (list))
         (define _for_loop_counter_ 0)
         (define _for_loop_container_ (unquote container))
         (while (< _for_loop_counter_ (len _for_loop_container_))
           (do
             (define (unquote sym) (nth _for_loop_container_ _for_loop_counter_))
             (define _for_loop_counter_ (+ _for_loop_counter_ 1))
             (append _result_list_ (unquote code))))
          _result_list_))))
 

 (defun plantuml_ast (ast)
   (+ "\n@startjson\n" (json_ast ast) "\n@endjson\n"))


  (define fact
    (lambda (x)
      (if (<= x 1)
        1
        (* x (fact (- x 1))))))
    
)
